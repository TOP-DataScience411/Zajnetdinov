ИМПОРТ МОДУЛЕЙ

  ==========  1  ==========  

Написать функцию с именем main, которая запрашивает у пользователя сообщение и выводит его с помощью функции important_message из другого модуля.

Объявление функции main помещается в файл 2.py
Объявление функции important_message помещается в файл utils.py в том же каталоге (каталог задания).

Функция main не принимает аргументы.

    Во время выполнения функции main необходимо получить из stdin текст сообщения.
    Далее, из функции main вызывается функция important_message.
    Возвращаемое значение функции important_message выводится в stdout c дополнительными символами конца строк до и после возвращаемого значения (см. пример проверки)

Функция main возвращает объект None.

Функция important_message принимает обязательным позиционно-ключевым аргументом текст сообщения в виде объекта str.
Функция important_message возвращает объект str.
    
    Задача этой функции — сгенерировать строку, в которой переданный текст будет обрамлён рамкой из символов '=' и '#'. 
        Ширина рамки определяется текущей шириной окна терминала. 
        Пустое пространство внутри рамки заполняется пробелами. 
        Между верхней границей рамки и первой строчкой текста должен быть отступ одна строчка. 
        Между последней строчкой текста и нижней границей рамки должен быть отступ одна строчка. 
        Текст внутри рамки выравнивается по центру.
        Между боковыми границами рамки и текстом должен быть минимальный отступ два пробела.
    
    Для того чтобы узнать ширину окна консоли, используйте функцию get_terminal_size() из модуля shutil стандартной библиотеки: https://docs.python.org/3/library/shutil.html#shutil.get_terminal_size
        Вычтите единицу из значения ширины, полученного с помощью get_terminal_size() — это место частично занято виджетом полосой вертикальной прокрутки.

Обратите внимание, что объект функции important_message должен быть доступен из пространства имён модуля основного файла 2.py (см. пример проверки)

Примечание: не забывайте о строковом методе center()

Написанные функции необходимо протестировать вручную.
Пример ручного теста:
    >>> main()
    текст сообщения: ЗАГОЛОВОК ПРОГРАММЫ
    
    #=============================================================================#
    #                                                                             #
    #                             ЗАГОЛОВОК ПРОГРАММЫ                             #
    #                                                                             #
    #=============================================================================#
    
    >>> text = 'Обратите внимание на очень важное сообщение от команды разработчиков этой великолепной программы'
    >>> msg = important_message(text)
    >>> print(msg)
    #=============================================================================#
    #                                                                             #
    #  Обратите внимание на очень важное сообщение от команды разработчиков этой  #
    #                            великолепной программы                           #
    #                                                                             #
    #=============================================================================#
    >>> 



  =========================  

Каждая функция должна быть документирована, её параметры и возвращаемое значение должны быть аннотированы.

Функции тестируются в режиме инспекции файла с кодом.
Ввод и вывод в стандартные потоки тестов и их результатов копируются.
Копия в виде комментария помещается в конец файла с кодом задачи.

Невыполнение дополнительных задач не повлечёт снижения баллов за задание. Тем не менее они настоятельно рекомендуются к решению.

В сервис Журнал отправляется сообщение о выполнении всех частей задания со ссылкой на репозиторий.

Преподаватель пишет комментарии и правки в коде задач и обновляет файлы в удалённом репозитории.
Регулярно получайте обновления в свой локальный репозиторий из удалённого репозитория.